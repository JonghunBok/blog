{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{177:function(t,s,a){\"use strict\";a.r(s);var n=a(28),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"blockquote\",[a(\"p\",[t._v('\"(동적계획법은) 프로그래밍 대회 문제에 가장 자주 출현하는 디자인 패러다임\"'),a(\"sup\",{staticClass:\"footnote-ref\"},[a(\"a\",{attrs:{href:\"#fn1\",id:\"fnref1\"}},[t._v(\"[1]\")])])])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"p\",[t._v(\"동적계획법을 공부하기 위해 먼저 알아두면 좋은 개념들을 살펴보고,\\n알고리즘 문제 해결을 위한 이론을 정리한 후에, 간단한 연습문제를 풀어 보았다.\")]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"선행-개념\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#선행-개념\"}},[t._v(\"#\")]),t._v(\" 선행 개념\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"분할-정복\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#분할-정복\"}},[t._v(\"#\")]),t._v(\" 분할 정복\")]),t._v(\" \"),a(\"p\",[t._v(\"문제를 더 작은 부분 문제로 나누어 해결하고, 그 결과를 이용해 원래 문제의 답을 구하는 기법이다.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"중복-부분-문제\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#중복-부분-문제\"}},[t._v(\"#\")]),t._v(\" 중복 부분 문제\")]),t._v(\" \"),a(\"p\",[t._v(\"문제를 부분 문제로 나누어 해결할 때 같은 부분 문제를 중복해 풀어야 하면, 문제가 중복 부분 문제를 가진다고 한다.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"메모이제이션\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#메모이제이션\"}},[t._v(\"#\")]),t._v(\" 메모이제이션\")]),t._v(\" \"),a(\"p\",[t._v(\"한 번 계산된 함수의 결과값들을 저장해서 사용하는 최적화 기법이다.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"참조적-투명성\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#참조적-투명성\"}},[t._v(\"#\")]),t._v(\" 참조적 투명성\")]),t._v(\" \"),a(\"p\",[t._v(\"표현식이 프로그램의 행동에 변화를 주지 않으면서, 그 결과값들로 완전히 대체될 수 있을 때 참조적으로 투명\"),a(\"sub\",[t._v(\"referentially transparent\")]),t._v(\"하다고 한다. 참조적으로 투명하기 위해선 표현식이 '순수'해야 한다.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"최적-부분-구조\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#최적-부분-구조\"}},[t._v(\"#\")]),t._v(\" 최적 부분 구조\")]),t._v(\" \"),a(\"p\",[a(\"em\",[t._v(\"=Optimal Substructure\")]),t._v(\", 문제의 최적해가 부분 문제의 최적해들로부터 구축될 수 있다면 그 문제는 최적부분구조를 가진다고 한다.\")]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"동적계획법이란\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#동적계획법이란\"}},[t._v(\"#\")]),t._v(\" 동적계획법이란\")]),t._v(\" \"),a(\"p\",[t._v(\"동적계획법\"),a(\"sub\",[t._v(\"Dynamic_Programming\")]),t._v(\"은\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"메모이제이션\")]),t._v(\"을 이용하는 \"),a(\"strong\",[t._v(\"분할정복\")]),t._v(\"이다.\")])]),t._v(\" \"),a(\"p\",[t._v(\"여기서 'programming'은 코딩같은 걸 말하는게 아니라 '표'를 사용하는 방법을 뜻하는데\"),a(\"sup\",{staticClass:\"footnote-ref\"},[a(\"a\",{attrs:{href:\"#fn2\",id:\"fnref2\"}},[t._v(\"[2]\")])]),t._v(\", 메모이제이션이 일종의 표(주로 배열\"),a(\"sub\",[t._v(\"array\")]),t._v(\"이나 해쉬테이블\"),a(\"sub\",[t._v(\"hash table\")]),t._v(\")를 사용하기 때문이다. 메모리를 더 사용해서 속도를 얻어내는 기법의 전형이다.\")]),t._v(\" \"),a(\"p\",[t._v(\"문제가 \"),a(\"strong\",[t._v(\"최적 부분 구조\")]),t._v(\"와 \"),a(\"strong\",[t._v(\"중복 부분 문제\")]),t._v(\"를 가진다면, 동적계획법을 고려해봐야 한다. 동적계획법은 다음의 4단계의 과정을 통해 사용된다.\"),a(\"sup\",{staticClass:\"footnote-ref\"},[a(\"a\",{attrs:{href:\"#fn3\",id:\"fnref3\"}},[t._v(\"[3]\")])])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"최적해의 구조를 알아낸다.\")]),t._v(\" \"),a(\"li\",[t._v(\"최적해를 재귀적으로 정의한다. (\"),a(\"em\",[t._v(\"= 점화식을 찾는다\")]),t._v(\")\")]),t._v(\" \"),a(\"li\",[t._v(\"최적해의 값을 계산한다, 일반적으로 상향식으로 계산한다.\")]),t._v(\" \"),a(\"li\",[t._v(\"계산된 정보로부터 최적해를 만들어 낸다.\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"원문:\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"Characterize the structure of an optimal solution.\")]),t._v(\" \"),a(\"li\",[t._v(\"Recursively define the value of an optimal solution.\")]),t._v(\" \"),a(\"li\",[t._v(\"Compute the value of an optimal solution, typically in a bottom-up fashion.\")]),t._v(\" \"),a(\"li\",[t._v(\"Construct an optimal solution from computed information.\")])])]),t._v(\" \"),a(\"p\",[t._v(\"3번 단계에서 추가적인 정보를 따로 저장하면, 4번 단계를 쉽게 수행할 수 있다. 만약 최적해의 '값'만 필요한 것이라면 4번 단계를 생략해도 좋다.\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"메모이제이션에-대하여\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#메모이제이션에-대하여\"}},[t._v(\"#\")]),t._v(\" 메모이제이션에 대하여\")]),t._v(\" \"),a(\"p\",[t._v(\"동적계획법에서 부분해를 얻는 함수를 사용할 때, 함수가 호출되는 문맥과 시기에 상관없이 최조로 계산되었던 값을 반환하기 때문에, 부분해를 구하는 함수가 \"),a(\"strong\",[t._v(\"참조적으로 투명\")]),t._v(\"해야 한다.\")]),t._v(\" \"),a(\"p\",[t._v(\"메모이제이션을 하는 방법은 두가지가 있다.\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"하향식 \"),a(\"sub\",[t._v(\"top-down\")]),t._v(\"\\n최적해의 구조를 이용해 재귀함수를 만들고, 그 함수로 원하는 값을 계산하는 방법.\")]),t._v(\" \"),a(\"li\",[t._v(\"상향식 \"),a(\"sub\",[t._v(\"bottom-up\")]),t._v(\"\\n부분 문제를 크기 순으로 정렬하여, 순서대로 푸는 방법. 이렇게 하면 각 부분 문제를 풀 때 필요한 더 작은 부분 문제들은 이미 계산이 되어있게 된다. 주로 반복문을 사용해 구현한다.\")])]),t._v(\" \"),a(\"p\",[t._v(\"하향식으로 접근하는 게 논리적으로 자연스럽고 구현도 쉽다. 하지만 재귀함수로 구현을 하면 함수 호출로 인한 오버헤드가 발생하고, 드물게 모든 부분 문제를 풀지 않을 수 있기 때문에 주의가 필요하다. 문제 풀이를 할 때, 하향식으로 먼저 풀고 그 후에 상향식으로 다시 풀면 좋은 연습이 될 것이다.\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"예시-문제-1-2-3-더하기\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#예시-문제-1-2-3-더하기\"}},[t._v(\"#\")]),t._v(\" 예시 문제 (1, 2, 3 더하기)\")]),t._v(\" \"),a(\"p\",[t._v(\"백준 사이트에서 \"),a(\"a\",{attrs:{href:\"https://www.acmicpc.net/problem/9095\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"9095번 문제\"),a(\"OutboundLink\")],1),t._v(\"를 풀어보자. 문제의 요구는 다음과 같다.\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.\")])]),t._v(\" \"),a(\"p\",[t._v(\"이 문제를 하향식과 상향식으로 각각 한 번 씩 풀어보았다. 1. 문제 풀이법을 잠시 생각해보고, 2. 코드를 읽고 이해한 후에, 3. 처음부터 끝까지 직접 구현해보자.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"풀이-1-하향식-접근\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#풀이-1-하향식-접근\"}},[t._v(\"#\")]),t._v(\" 풀이 1; 하향식 접근\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-cpp extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-cpp\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[t._v(\"#\"),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<iostream>\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"using\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"namespace\")]),t._v(\" std\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"11\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \\n      \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" T\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  cin \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>\")]),t._v(\" T\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"T\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    cin \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>\")]),t._v(\" n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"count\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"풀이-2-상향식-접근\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#풀이-2-상향식-접근\"}},[t._v(\"#\")]),t._v(\" 풀이 2; 상향식 접근\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-cpp extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-cpp\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token macro property\"}},[t._v(\"#\"),a(\"span\",{pre:!0,attrs:{class:\"token directive keyword\"}},[t._v(\"include\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"<iostream>\")])]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"using\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"namespace\")]),t._v(\" std\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"11\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \\n      dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" T\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  cin \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>\")]),t._v(\" T\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"T\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    cin \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>\")]),t._v(\" n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    cout \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" dp\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<<\")]),t._v(\" endl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"풀어봄직한-문제\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#풀어봄직한-문제\"}},[t._v(\"#\")]),t._v(\" 풀어봄직한 문제\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://www.acmicpc.net/problem/2579\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"백준 2579번: 계단 오르기\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.acmicpc.net/problem/11050\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"백준 11050번: 이항 계수 1\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.acmicpc.net/problem/11051\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"백준 11051번: 이항 계수 2\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.acmicpc.net/problem/1965\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"백준 1965번: 상자넣기\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"읽어볼-자료\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#읽어볼-자료\"}},[t._v(\"#\")]),t._v(\" 읽어볼 자료\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Referential_transparency\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"위키: 참조적 투명성\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Optimal_substructure\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"위키: 최적부분구조\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Overlapping_subproblems\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"위키: 중복부분문제\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"hr\",{staticClass:\"footnotes-sep\"}),t._v(\" \"),a(\"section\",{staticClass:\"footnotes\"},[a(\"ol\",{staticClass:\"footnotes-list\"},[a(\"li\",{staticClass:\"footnote-item\",attrs:{id:\"fn1\"}},[a(\"p\",[a(\"em\",[t._v(\"종만북 p.207\")]),t._v(\" \"),a(\"a\",{staticClass:\"footnote-backref\",attrs:{href:\"#fnref1\"}},[t._v(\"↩︎\")])])]),t._v(\" \"),a(\"li\",{staticClass:\"footnote-item\",attrs:{id:\"fn2\"}},[a(\"p\",[a(\"em\",[t._v(\"Introduction To Algorithm, 3rd Edition, p.359\")]),t._v(\" \"),a(\"a\",{staticClass:\"footnote-backref\",attrs:{href:\"#fnref2\"}},[t._v(\"↩︎\")])])]),t._v(\" \"),a(\"li\",{staticClass:\"footnote-item\",attrs:{id:\"fn3\"}},[a(\"p\",[a(\"em\",[t._v(\"같은 책, 같은 쪽\")]),t._v(\" \"),a(\"a\",{staticClass:\"footnote-backref\",attrs:{href:\"#fnref3\"}},[t._v(\"↩︎\")])])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}